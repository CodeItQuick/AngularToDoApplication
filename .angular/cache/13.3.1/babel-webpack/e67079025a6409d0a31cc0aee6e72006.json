{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Owner\\\\Documents\\\\todo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { catchError, of } from \"rxjs\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ToDoService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.toDo = [];\n  }\n\n  getChores() {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json' // 'Access-Control-Allow-Origin':'*'\n\n      })\n    };\n    return this.httpClient.get('http://localhost/api/todo', httpOptions).pipe(chores => chores, catchError(err => {\n      console.log(err);\n      return of({\n        rows: []\n      });\n    })); // return new Observable<Chores[]>(observer => {\n    //   setInterval(() => observer.next(CHORES_DATA), 4000);\n    // });\n  }\n\n  createToDo(data) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      yield _this.httpClient.post('http://localhost/api/todo', {\n        data\n      }, httpOptions).pipe(results => {\n        console.log(results);\n        return results;\n      });\n    })();\n  }\n\n}\n\nToDoService.ɵfac = function ToDoService_Factory(t) {\n  return new (t || ToDoService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nToDoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ToDoService,\n  factory: ToDoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Owner/Documents/todo/src/app/app.service.ts"],"names":["catchError","of","HttpHeaders","i0","i1","ToDoService","constructor","httpClient","toDo","getChores","httpOptions","headers","get","pipe","chores","err","console","log","rows","createToDo","data","post","results","ɵfac","ToDoService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,EAArB,QAA+B,MAA/B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACH;;AACDC,EAAAA,SAAS,GAAG;AACR,UAAMC,WAAW,GAAG;AAChBC,MAAAA,OAAO,EAAE,IAAIT,WAAJ,CAAgB;AACrB,wBAAgB,kBADK,CAErB;;AAFqB,OAAhB;AADO,KAApB;AAMA,WAAO,KAAKK,UAAL,CAAgBK,GAAhB,CAAoB,2BAApB,EAAiDF,WAAjD,EACFG,IADE,CACGC,MAAM,IAAIA,MADb,EACqBd,UAAU,CAAEe,GAAD,IAAS;AAC5CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOd,EAAE,CAAC;AAAEiB,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAT;AACH,KAHqC,CAD/B,CAAP,CAPQ,CAYR;AACA;AACA;AACH;;AACKC,EAAAA,UAAU,CAACC,IAAD,EAAO;AAAA;;AAAA;AACnB,YAAMV,WAAW,GAAG;AAChBC,QAAAA,OAAO,EAAE,IAAIT,WAAJ,CAAgB;AACrB,0BAAgB;AADK,SAAhB;AADO,OAApB;AAKA,YAAM,KAAI,CAACK,UAAL,CAAgBc,IAAhB,CAAqB,2BAArB,EAAkD;AAAED,QAAAA;AAAF,OAAlD,EAA4DV,WAA5D,EACDG,IADC,CACIS,OAAO,IAAI;AACjBN,QAAAA,OAAO,CAACC,GAAR,CAAYK,OAAZ;AACA,eAAOA,OAAP;AACH,OAJK,CAAN;AANmB;AAWtB;;AAhCoB;;AAkCzBjB,WAAW,CAACkB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIpB,WAAV,EAAuBF,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAtB,WAAW,CAACuB,KAAZ,GAAoB,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,WAAT;AAAsB0B,EAAAA,OAAO,EAAE1B,WAAW,CAACkB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { catchError, of } from \"rxjs\";\r\nimport { HttpHeaders } from \"@angular/common/http\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ToDoService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n        this.toDo = [];\r\n    }\r\n    getChores() {\r\n        const httpOptions = {\r\n            headers: new HttpHeaders({\r\n                'Content-Type': 'application/json',\r\n                // 'Access-Control-Allow-Origin':'*'\r\n            })\r\n        };\r\n        return this.httpClient.get('http://localhost/api/todo', httpOptions)\r\n            .pipe(chores => chores, catchError((err) => {\r\n            console.log(err);\r\n            return of({ rows: [] });\r\n        }));\r\n        // return new Observable<Chores[]>(observer => {\r\n        //   setInterval(() => observer.next(CHORES_DATA), 4000);\r\n        // });\r\n    }\r\n    async createToDo(data) {\r\n        const httpOptions = {\r\n            headers: new HttpHeaders({\r\n                'Content-Type': 'application/json',\r\n            })\r\n        };\r\n        await this.httpClient.post('http://localhost/api/todo', { data }, httpOptions)\r\n            .pipe(results => {\r\n            console.log(results);\r\n            return results;\r\n        });\r\n    }\r\n}\r\nToDoService.ɵfac = function ToDoService_Factory(t) { return new (t || ToDoService)(i0.ɵɵinject(i1.HttpClient)); };\r\nToDoService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ToDoService, factory: ToDoService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}